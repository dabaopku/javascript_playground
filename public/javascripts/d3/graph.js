// Generated by CoffeeScript 1.9.2
(function() {
  $(function() {
    var colorScale, data, force, height, linkLayer, links, margin, nodeLayer, nodes, strokeScale, svg, updateData, updateLayout, updateLinks, updateNodes, width;
    width = 500;
    height = 500;
    margin = {
      left: 20,
      right: 20,
      top: 20,
      bottom: 20
    };
    svg = d3.select("body").append("svg").attr({
      width: width + margin.left + margin.right,
      height: height + margin.top + margin.bottom,
      id: "graph"
    });
    linkLayer = svg.append("g").attr({
      id: "links"
    });
    nodeLayer = svg.append("g").attr({
      id: "nodes"
    });
    data = {};
    nodes = [];
    links = [];
    colorScale = d3.scale.category20();
    strokeScale = function(d) {
      return d3.rgb(colorScale(d)).darker().toString();
    };
    updateData = function() {
      var nodeMap, rScale;
      rScale = d3.scale.sqrt().domain(d3.extent(data.nodes, function(d) {
        return d.playcount;
      })).range([3, 12]);
      data.nodes.forEach(function(d) {
        d.x = Math.floor(Math.random() * width);
        d.y = Math.floor(Math.random() * width);
        return d.r = rScale(d.playcount);
      });
      nodeMap = {};
      data.nodes.forEach(function(d) {
        return nodeMap[d.id] = d;
      });
      data.links.forEach(function(d) {
        d.source = nodeMap[d.source];
        return d.target = nodeMap[d.target];
      });
      updateNodes();
      updateLinks();
      return updateLayout();
    };
    updateNodes = function() {
      nodes = nodeLayer.selectAll("circle.node").data(data.nodes);
      nodes.enter().append("circle").attr({
        cx: function(d) {
          return d.x;
        },
        cy: function(d) {
          return d.y;
        },
        r: function(d) {
          return d.r;
        },
        "class": "node",
        fill: function(d) {
          return colorScale(d.artist);
        },
        stroke: function(d) {
          return strokeScale(d.artist);
        }
      }).on("mouseover", function(e) {
        return links.style("stroke", function(d) {
          if (d.source === e || d.target === e) {
            return "#555";
          } else {
            return "#eee";
          }
        });
      }).on("mouseout", function(e) {
        return links.style("stroke", "#ddd");
      });
      return nodes.exit().remove();
    };
    updateLinks = function() {
      links = linkLayer.selectAll("line.link").data(data.links);
      links.enter().append("line").attr({
        x1: function(d) {
          return d.source.x;
        },
        y1: function(d) {
          return d.source.y;
        },
        x2: function(d) {
          return d.target.x;
        },
        y2: function(d) {
          return d.target.y;
        },
        "class": "link"
      });
      return links.exit().remove();
    };
    force = d3.layout.force();
    force.size([width, height]);
    updateLayout = function() {
      var forceTick;
      forceTick = function(e) {
        nodes.attr({
          cx: function(d) {
            return d.x;
          },
          cy: function(d) {
            return d.y;
          }
        });
        return links.attr({
          x1: function(d) {
            return d.source.x;
          },
          y1: function(d) {
            return d.source.y;
          },
          x2: function(d) {
            return d.target.x;
          },
          y2: function(d) {
            return d.target.y;
          }
        });
      };
      force.on("tick", forceTick).charge(-40).linkDistance(10);
      force.nodes(data.nodes);
      return force.start();
    };
    return d3.json("javascripts/d3/graph.json", function(json) {
      data = json;
      return updateData();
    });
  });

}).call(this);
